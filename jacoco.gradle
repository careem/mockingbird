apply plugin: 'jacoco'

jacoco {
    toolVersion = Deps.jacocoVersion
}

subprojects {
    apply plugin: 'jacoco'
}

def mainSubProject = "mockingbird"

task jacocoUnitTestReport(type: JacocoReport,
        dependsOn: []) {
    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination = file("${project(":${mainSubProject}").buildDir}/reports/jacoco/jacocoUnitTestReport.xml")
        html.destination = file("${project(":${mainSubProject}").buildDir}/reports/jacoco/html")
    }

    def srcDirectoryList = []
    def classDirectoryList = []
    def executionDataList = []

    def classPathExcludeList = []

    subprojects.findAll { it.name != 'app' }.forEach { subProject ->

        //common main directory
        def commonMainSourceDirs = "$subProject.projectDir/src/commonMain/kotlin"
        //Jvm directory (main)
        def jvmMainSourceDirs = "$subProject.projectDir/src/jvmMain/kotlin"
        def kotlinDebugPath = "${subProject.buildDir}/classes/kotlin/jvm"

        def classDirectories = fileTree(
                dir: kotlinDebugPath,
                excludes: classPathExcludeList
        )
        def executionData = fileTree(dir: subProject.buildDir, includes: ['jacoco/jvmTest.exec'])

        srcDirectoryList.addAll(commonMainSourceDirs, jvmMainSourceDirs)
        classDirectoryList.add(classDirectories)
        executionDataList.add(executionData)
    }

    classDirectories.from = files(classDirectoryList)
    executionData.from = files(executionDataList)
    sourceDirectories.from = files(srcDirectoryList)
}